package rk.device.launcher.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import rk.device.launcher.db.entity.Record;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD".
*/
public class RecordDao extends AbstractDao<Record, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity Record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UniqueId = new Property(1, String.class, "uniqueId", false, "UNIQUE_ID");
        public final static Property PopeName = new Property(2, String.class, "popeName", false, "POPE_NAME");
        public final static Property PeopleId = new Property(3, String.class, "peopleId", false, "PEOPLE_ID");
        public final static Property OpenType = new Property(4, int.class, "openType", false, "OPEN_TYPE");
        public final static Property Data = new Property(5, String.class, "data", false, "DATA");
        public final static Property Slide_data = new Property(6, int.class, "slide_data", false, "SLIDE_DATA");
        public final static Property Cdate = new Property(7, int.class, "cdate", false, "CDATE");
    }


    public RecordDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UNIQUE_ID\" TEXT NOT NULL UNIQUE ," + // 1: uniqueId
                "\"POPE_NAME\" TEXT," + // 2: popeName
                "\"PEOPLE_ID\" TEXT NOT NULL UNIQUE ," + // 3: peopleId
                "\"OPEN_TYPE\" INTEGER NOT NULL ," + // 4: openType
                "\"DATA\" TEXT," + // 5: data
                "\"SLIDE_DATA\" INTEGER NOT NULL ," + // 6: slide_data
                "\"CDATE\" INTEGER NOT NULL );"); // 7: cdate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUniqueId());
 
        String popeName = entity.getPopeName();
        if (popeName != null) {
            stmt.bindString(3, popeName);
        }
        stmt.bindString(4, entity.getPeopleId());
        stmt.bindLong(5, entity.getOpenType());
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(6, data);
        }
        stmt.bindLong(7, entity.getSlide_data());
        stmt.bindLong(8, entity.getCdate());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUniqueId());
 
        String popeName = entity.getPopeName();
        if (popeName != null) {
            stmt.bindString(3, popeName);
        }
        stmt.bindString(4, entity.getPeopleId());
        stmt.bindLong(5, entity.getOpenType());
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(6, data);
        }
        stmt.bindLong(7, entity.getSlide_data());
        stmt.bindLong(8, entity.getCdate());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Record readEntity(Cursor cursor, int offset) {
        Record entity = new Record( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // uniqueId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // popeName
            cursor.getString(offset + 3), // peopleId
            cursor.getInt(offset + 4), // openType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // data
            cursor.getInt(offset + 6), // slide_data
            cursor.getInt(offset + 7) // cdate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Record entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUniqueId(cursor.getString(offset + 1));
        entity.setPopeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPeopleId(cursor.getString(offset + 3));
        entity.setOpenType(cursor.getInt(offset + 4));
        entity.setData(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSlide_data(cursor.getInt(offset + 6));
        entity.setCdate(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Record entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Record entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Record entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
