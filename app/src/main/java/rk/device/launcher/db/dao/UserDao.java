package rk.device.launcher.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import rk.device.launcher.db.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UniqueId = new Property(1, String.class, "uniqueId", false, "UNIQUE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property PopedomType = new Property(3, String.class, "popedomType", false, "POPEDOM_TYPE");
        public final static Property CardNo = new Property(4, String.class, "cardNo", false, "CARD_NO");
        public final static Property FingerID = new Property(5, String.class, "fingerID", false, "FINGER_ID");
        public final static Property FaceID = new Property(6, String.class, "faceID", false, "FACE_ID");
        public final static Property PassWord = new Property(7, String.class, "passWord", false, "PASS_WORD");
        public final static Property StartTime = new Property(8, long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(9, long.class, "endTime", false, "END_TIME");
        public final static Property FingerCode = new Property(10, String.class, "fingerCode", false, "FINGER_CODE");
        public final static Property UploadStatus = new Property(11, int.class, "uploadStatus", false, "UPLOAD_STATUS");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UNIQUE_ID\" TEXT NOT NULL ," + // 1: uniqueId
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"POPEDOM_TYPE\" TEXT NOT NULL ," + // 3: popedomType
                "\"CARD_NO\" TEXT," + // 4: cardNo
                "\"FINGER_ID\" TEXT," + // 5: fingerID
                "\"FACE_ID\" TEXT," + // 6: faceID
                "\"PASS_WORD\" TEXT," + // 7: passWord
                "\"START_TIME\" INTEGER NOT NULL ," + // 8: startTime
                "\"END_TIME\" INTEGER NOT NULL ," + // 9: endTime
                "\"FINGER_CODE\" TEXT," + // 10: fingerCode
                "\"UPLOAD_STATUS\" INTEGER NOT NULL );"); // 11: uploadStatus
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_UNIQUE_ID ON \"USER\"" +
                " (\"UNIQUE_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUniqueId());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getPopedomType());
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(5, cardNo);
        }
 
        String fingerID = entity.getFingerID();
        if (fingerID != null) {
            stmt.bindString(6, fingerID);
        }
 
        String faceID = entity.getFaceID();
        if (faceID != null) {
            stmt.bindString(7, faceID);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(8, passWord);
        }
        stmt.bindLong(9, entity.getStartTime());
        stmt.bindLong(10, entity.getEndTime());
 
        String fingerCode = entity.getFingerCode();
        if (fingerCode != null) {
            stmt.bindString(11, fingerCode);
        }
        stmt.bindLong(12, entity.getUploadStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUniqueId());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getPopedomType());
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(5, cardNo);
        }
 
        String fingerID = entity.getFingerID();
        if (fingerID != null) {
            stmt.bindString(6, fingerID);
        }
 
        String faceID = entity.getFaceID();
        if (faceID != null) {
            stmt.bindString(7, faceID);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(8, passWord);
        }
        stmt.bindLong(9, entity.getStartTime());
        stmt.bindLong(10, entity.getEndTime());
 
        String fingerCode = entity.getFingerCode();
        if (fingerCode != null) {
            stmt.bindString(11, fingerCode);
        }
        stmt.bindLong(12, entity.getUploadStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // uniqueId
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // popedomType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cardNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fingerID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // faceID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // passWord
            cursor.getLong(offset + 8), // startTime
            cursor.getLong(offset + 9), // endTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fingerCode
            cursor.getInt(offset + 11) // uploadStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUniqueId(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setPopedomType(cursor.getString(offset + 3));
        entity.setCardNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFingerID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFaceID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPassWord(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStartTime(cursor.getLong(offset + 8));
        entity.setEndTime(cursor.getLong(offset + 9));
        entity.setFingerCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUploadStatus(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
